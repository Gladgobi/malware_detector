import os
import threading
import tkinter as tk
from tkinter import filedialog, scrolledtext, messagebox, ttk
import yara

# Compile YARA rules for ransomware, trojans, and adware
ransomware_rule = yara.compile(filepath='wannacry.yar')
trojan_rule = yara.compile(filepath='Linux_Trojan_Mirai.yar')
adware_rule = yara.compile(filepath='Adware.DealPly.yar')  # Replace with your actual adware rule file

def select_directory():
    global monitored_path
    monitored_path = filedialog.askdirectory()
    print("Monitoring: " + monitored_path)

def update_scanning_progress(value):
    progress_bar['value'] = value
    root.update_idletasks()
    scanning_progress_label.config(text=f"Scanning: {value:.2f}%")

def monitor_file_system():
    global detected_files, suspicious_files, monitored_path

    detected_files = []
    suspicious_files = []
    
    total_files = sum(1 for _ in os.walk(monitored_path) for _ in _[2])
    processed_files = 0
    print(total_files)
    detected_files_text.insert(tk.END, f"{'Total files to scan: ', total_files}\n\n")
    for root, _, files in os.walk(monitored_path):
        for file in files:
            file_path = os.path.join(root, file)
            detected_files.append(file_path)
            try:
                with open(file_path, 'rb') as f:
                    file_data = f.read()
                    ransomware_matches = ransomware_rule.match(data=file_data)
                    trojan_matches = trojan_rule.match(data=file_data)
                    adware_matches = adware_rule.match(data=file_data)
                    
                    if ransomware_matches:
                        detected_files_text.insert(tk.END, f"{'Type of Ransomware: ', ransomware_matches}\n")
                        detected_files_text.insert(tk.END, f"{'Path: ', file_path}\n\n")
                        print("Type of Ransomware: ", *ransomware_matches)
                        print("Path: ", file_path)
                    
                    elif trojan_matches:
                        detected_files_text.insert(tk.END, f"{'Type of Trojan: ', trojan_matches}\n")
                        detected_files_text.insert(tk.END, f"{'Path: ', file_path}\n\n")
                        print("Type of Trojan: ", *trojan_matches)
                        print("Path: ", file_path)
                    
                    elif adware_matches:
                        detected_files_text.insert(tk.END, f"{'Type of Adware: ', adware_matches}\n")
                        detected_files_text.insert(tk.END, f"{'Path: ', file_path}\n\n")
                        print("Type of Adware: ", *adware_matches)
                        print("Path: ", file_path)
                
                processed_files += 1
                update_scanning_progress((processed_files / total_files) * 100)
            except:
                print("\nSome files are not accessible to analyze\n")

def start_monitoring():
    global monitored_path, file_monitor_thread

    if not monitored_path:
        messagebox.showerror("Error", "Please select a directory to monitor.")
        return
    
    file_monitor_thread = threading.Thread(target=monitor_file_system)
    file_monitor_thread.start()
    start_button.config(state="disabled")
    stop_button.config(state="normal")

def stop_monitoring():
    global file_monitor_thread

    file_monitor_thread.join()
    start_button.config(state="normal")

root = tk.Tk()
root.geometry("700x750")
root.resizable(False, False)
root.title("Malware Detection Tool")

# Hacker theme styles
root.configure(bg="white")
style = ttk.Style()
style.configure("TLabel", background="white", foreground="green", font=("Courier", 12))
style.configure("TButton", background="white", foreground="green", font=("Courier", 12), relief="flat")
style.configure("TProgressbar", troughcolor="white", background="green")

monitored_path = ""
detected_files = []
suspicious_files = []

label = ttk.Label(root, text="Select a directory to monitor:")
label.pack()

browse_button = ttk.Button(root, text="Browse", command=select_directory)
browse_button.pack()

start_button = ttk.Button(root, text="Start Monitoring", command=start_monitoring)
start_button.pack()

stop_button = ttk.Button(root, text="Stop Monitoring", command=stop_monitoring, state="disabled")
stop_button.pack()

scanning_progress_label = ttk.Label(root, text="", style="TLabel")
scanning_progress_label.pack()

progress_bar = ttk.Progressbar(root, orient="horizontal", length=500, mode="determinate", style="TProgressbar")
progress_bar.pack()

detected_files_text = scrolledtext.ScrolledText(root, height=30, width=100, border=8, bg="white", fg="green", font=("Courier", 10))
detected_files_text.pack()

root.mainloop()
